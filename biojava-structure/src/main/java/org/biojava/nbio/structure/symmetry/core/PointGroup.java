package org.biojava.nbio.structure.symmetry.core;

import java.util.List;

import javax.vecmath.Matrix4d;

import org.biojava.nbio.structure.align.util.RotationAxis;

/**
 * Represents an alignment of structures with point group symmetry.
 * 
 * <p>Point groups include cyclic (e.g. "C2"), dihedral (e.g. "D3"), and
 * polyhedral (e.g. "I") symmetry. They form an algebraic group over a set
 * of linear transformation operations. Applying these operations to a point
 * will result in a set of equivalent points. Since it is a point group, there
 * exists a point (often the origin, but not neccessarily so) such that all
 * operations will leave this point unchanged. The operations are equivalent
 * to rotations around an axis by a rational fraction of PI.
 * 
 * 
 * <p>The PointGroup class is closely related to {@link RotationGroup}, but
 * tries to abstract out the algebraic group from the chains being aligned.
 * 
 * @author Spencer Bliven
 *
 */
public interface PointGroup {
	/**
	 * @return The number of elements in this group
	 */
	public int getOrder();

	/**
	 * The generators are a minimal set of operators whose combination
	 * can account for all operators. All 3D point groups can be generated
	 * by either one or two operators.
	 * @return The list of generators
	 */
	public List<Matrix4d> getGenerators();

	public void setGenerator(int i, Matrix4d gen);
	
	/**
	 * Get a list of all elements in this group.
	 * 
	 * <p>The first operator is always the identity matrix by convention.
	 * 
	 * @return A list of operators of length {@link #getOrder()}
	 */
	public List<Matrix4d> getOperators();

	/**
	 * Equivalent to <tt>{@link #getOperators()}.get(i)</tt>
	 * @param i index of the operator to return
	 * @return the ith operator
	 * @throws IndexOutOfBoundsException if i < 0 or {@link #getOrder()} <= i 
	 */
	public Matrix4d getOperator(int i);

	/**
	 * Decompose each operator into a product of one or more generators. For
	 * example, if {@link #getGenerators()} gives matrices [A,B], then the
	 * operator X = A^2*B would be represented by the list [0,0,1].
	 * 
	 * The identity can be represented by an empty list. In cases where an
	 * operator can be generated by several combinations of generators,
	 * implementations may return any of them but should prefer the shorter list.
	 * 
	 * Due to limited precision, multiplying generators may not give exactly
	 * the same result as the corresponding element of {@link #getOperators()}.
	 * In this case, the latter matrix should be preferred.
	 * 
	 * @return A list of length {@link #getOrder()}, where each element gives
	 *  the indices of elements of {@link #getGenerators()} which should be
	 *  right multiplied to give the corresponding element of {@link #getOperators()}.
	 */
	public List<List<Integer>> getOperatorFactors();


	/**
	 * Get the rotation axis associated with operator i
	 * @param i operator index
	 * @return
	 * @throws IndexOutOfBoundsException if i < 0 or {@link #getOrder()} <= i 
	 */
	public RotationAxis getAxis(int i);
	
	/**
	 * @param i Operator index
	 * @return The number k such that <tt>getOperator(i)^k</tt> is the identity.
	 * @throws IndexOutOfBoundsException if i < 0 or {@link #getOrder()} <= i 
	 */
	public int getOperatorOrder(int i);
	
	/**
	 * Get a string representing the symmetry of this point group,
	 * e.g. "D3"
	 * @return Schoenflies notation for this point group
	 */
	public String getSymmetryString();

}
